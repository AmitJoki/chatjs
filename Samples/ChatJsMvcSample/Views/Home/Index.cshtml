@model ChatJsMvcSample.Models.ViewModels.ChatViewModel

<!DOCTYPE html>
<html>
<head>
    <title>ChatJS - Facebook style chat for your Web App</title>
    <!--Scripts-->
    <script src="/Scripts/jquery-1.8.1.min.js" type="text/javascript"></script>
    <script src="/Bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
    <script src="/Scripts/jquery.signalR-1.1.2.min.js"></script>
    <script src="/signalr/hubs" type="text/javascript"></script>
    <script src="/ChatJs/Scripts/jquery.activity-indicator-1.0.0.min.js" type="text/javascript"></script>
    <script src="/ChatJs/Scripts/jquery.autosize.min.js" type="text/javascript"></script>
    <!-- for long polling, use /ChatJs/Scripts/jquery.chatjs.longpollingadapter.js instead of /ChatJs/Scripts/jquery.chatjs.signalradapter.js -->
    @*<script src="/ChatJs/Scripts/jquery.chatjs.longpollingadapter.js" type="text/javascript"></script>*@
    <script src="/ChatJs/Scripts/jquery.chatjs.signalradapter.js" type="text/javascript"></script>
    <script src="/ChatJs/Scripts/jquery.chatjs.js" type="text/javascript"></script>
    <script src="/Scripts/scripts.js" type="text/javascript"></script>
    <script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js"></script>
    <!--Styles-->
    <link rel="stylesheet" type="text/css" href="/Content/Styles/styles.css" />
    <link rel="stylesheet" type="text/css" href="/ChatJs/Styles/jquery.chatjs.css" />
    <link rel="stylesheet" type="text/css" href="/Bootstrap/css/bootstrap.min.css" />
    <link rel="stylesheet" type="text/css" href="/Bootstrap/css/bootstrap-responsive.min.css" />
    <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-41028546-1', 'chatjs.net');
        ga('send', 'pageview');

    </script>
    @if (this.Model != null && this.Model.IsUserAuthenticated)
    {
        <script type="text/javascript">
            $(function () {
                $.chat({
                    // your user information
                    user: {
                        Id: @this.Model.UserId,
                        Name: '@this.Model.UserName',
                        ProfilePictureUrl: '@Html.Raw(this.Model.UserProfilePictureUrl)'
                    },
                    // text displayed when the other user is typing
                    typingText: ' is typing...',
                    // the title for the user's list window
                    titleText: 'Chat',
                    // text displayed when there's no other users in the room
                    emptyRoomText: "There's no one around here. You can still open a session in another browser and chat with yourself :)",
                    // the adapter you are using
                    adapter: new SignalRAdapter() // new LongPollingAdapter()
                });
            });
        </script>
    }
</head>
<body>
    <div class="hero">
        <div class="test"></div>
        <div class="container">
            <div class="hero-text">
                <img src="/Content/Images/logo.png" />
                <div class="version"><a href="#">ver. 1.1</a></div>
                <h1>Embed instant messaging into your Web App!</h1>
                <p class="info">
                    ChatJS is a full-featured, lightweight, Facebook style jQuery plugin for instant messaging. ChatJS also comes with a server side implementation
                        for ASP.NET/SignalR out of the box.
                </p>
                <a class="btn btn-primary btn-large" href="https://github.com/andrerpena/chatjs/archive/chatjs-main.zip"><i class="icon-white icon-download-alt" style="margin-right: 10px; margin-top: 4px;"></i>Download</a>
                @if (this.Model != null && this.Model.IsUserAuthenticated)
                {
                    <a id="leaveChatButton" href="#" class="btn btn-warning btn-large">Leave demo chat</a>                    
                }
                else
                {
                    <a id="joinChatButton" href="#" class="btn btn-info btn-large">Join public demo chat</a>
                    <img class="callout" src="/Content/Images/callout.png" />
                }
                <p class="github">
                    ... or visit the <a href="https://github.com/andrerpena/chatjs">project at GitHub</a>.
                </p>
            </div>
            <div class="screenshot-wrapper">
                <img src="/Content/Images/screenshot.png" />
            </div>
        </div>
    </div>
    <div class="container">
        <div class="row">

            <div class="span6">
                <h4>How it works:
                </h4>
                <p>
                    The client part is divided in two JavaScript files.
                    The file <a href="https://github.com/andrerpena/chatjs/blob/chatjs-main/ChatJs/Scripts/jquery.chatjs.js">jquery.chatjs.js</a> contains the main jQuery plugin. This file is completely
                    independent of the server implementation. In order to implement the interface between <a href="https://github.com/andrerpena/chatjs/blob/chatjs-main/ChatJs/Scripts/jquery.chatjs.js">jquery.chatjs.js</a> and 
                    the server, you need and adapter. ChatJS comes with two adapter implementations. The first one, <a href="https://github.com/andrerpena/chatjs/blob/chatjs-main/ChatJs/Scripts/jquery.chatjs.signalradapter.js">jquery.chatjs.signalradapter.js</a>, is meant to be used with ASP.NET and <a href="http://www.asp.net/signalr">SignalR</a>.
                    This is the preferable way for working with ASP.NET. The second one is <a href="https://github.com/andrerpena/chatjs/blob/chatjs-main/ChatJs/Scripts/jquery.chatjs.longpollingadapter.js">jquery.chatjs.longpollingadapter.js</a>
                    which is the generic client-side implementation. This adapter can work with whatever server-side implementation you prefer, as long as the proper end-points are implemented.
                </p>
                <p>Once the server is set up, the client code is quite simple. These are all the options:</p>
                <pre class="prettyprint ">
$.chat({
    // your user information
    user: {
        Id: 3,
        Name: 'John Silver',
        ProfilePictureUrl: 'http://www.foo.com/avatar/123'
    },
    // text displayed when the other user is typing
    typingText: ' is typing...',
    // the title for the user's list window
    titleText: 'ChatJS demo chat',
    // text displayed when there's no other users in the room
    emptyRoomText: "There's no one around here.",
    // the adapter you are using. There are 2 implementations out of the box:
    // SignalRAdapter and LongPollingAdapter (server independent).
    adapter: new SignalRAdapter()
});
</pre>
            </div>
            <div class="span6">
                <h4>Features:</h4>
                <ul class="green-checks">
                    <li>Real time message sharing.</li>
                    <li>Automatically parses URLs and emoticons <span class="happy"></span>.</li>
                    <li>Automatically remembers opened windows across diferent requests (through cookies).</li>
                    <li>Triggers a sound notification when the user receives a message.</li>
                    <li>Indicates when the other user is typing.</li>
                    <li>Supports multiple chat rooms. If you have a multi-tenancy app you can create a room for each tenancy, for instance.</li>
                    <li>Supports multiple browser windows opened with the same session. They all get properly sinchronized.</li>
                    <li>Customizable texts. You can easily translate it to your language.</li>
                    <li>Two adapter implementations with sample ASP.NET projects.</li>
                </ul>
                <h4>License:</h4>
                <p>
                    ChatJS 1.1 is dual licensed. For non-commercial use, ChatJS is free under the <a href="http://www.tldrlegal.com/license/mit-license">MIT license</a>.
                    For commercial license, ChatJS costs <code>$59</code> for unlimited domains, with 1 year of free-updates.
                </p>
            </div>
        </div>
        <div class="row">
            <div class="span12">
                <h3>How to get ChatJS up and running in your environment</h3>
                <p>
                    The first thing to do is to determine which adapter you want to use. The adapter is the piece of code that will determine how the client will communicate to the server.
                    ChatJS comes with two adapters and a server-side project samples for each adapter, both written in ASP.NET. If you are working with ASP.NET, it's highly recommended that you use <a href="http://signalr.net/">SignalR</a>.
                    <a href="http://signalr.net/">SignalR</a> allows for seamless client-server communication. You can contact the client and call client functions from the server. If you are
                    not using ASP.NET or you can't use SignalR for some reason, long polling is the way to go. <a href="http://en.wikipedia.org/wiki/Push_technology#Long_polling">Long polling</a> is 
                    a client-server communication technique in which, when the client calls the server asking for information, if the server does not have anything new, instead of returning
                    an empty result, the server holds on and waits until there's something new to return. Example: Let's say you're using ChatJS long-polling adapter and it's requesting 
                    new messages. There's a possibility that new messages exist for a given user when the adapter goes to the server. But there's also the possibility that nothing new exists. In this case,
                    the server will hold on the request until there's a new message. This process is called long-polling.
                </p>
                <h3>Working with SignalR</h3>
                <h4>The server</h4>
                <p>
                    As I said, ChatJS only works out of the box with <a href="http://signalr.net/">ASP.NET with SignalR</a>, so, this manual will be focused in this scenario.
                    Everything that I'll explain here is implemented already in the demo application available in the <a href="https://github.com/andrerpena/chatjs/archive/chatjs-main.zip">ChatJS package</a>. It's highly recommended that
                    will download that before continuing with this manual. First thing to do is to download <a href="http://signalr.net/">SignalR</a> if you haven't already. To do so, in Visual Studio, select the Tools menu, and then Library Package Manager and then select Package Manager console. Now type in the following line: 
                </p>
                <pre class="prettyprint">Install-Package Microsoft.AspNet.SignalR</pre>
                <p>
                    This will install all the packages needed to run SignalR. Now let's set up the code. First, go to your <code>HttpApplication</code> class and put this in the <code>Application_Start</code> method:
                    
                    <pre class="prettyprint">
protected void Application_Start()
{
    //...
    // add this line:
    RouteTable.Routes.MapHubs();
}
</pre>
                    This will map the routes needed to make the server accessible to the client. Next, you need to add the necessary scripts in your Views, preferably the layout. Add the following lines:
                    
                </p>
                <pre class="prettyprint">
&lt;script src="/Scripts/jquery.signalR-1.1.0.min.js"&gt;&lt;/script&gt;
&lt;script src="/signalr/hubs" type="text/javascript"&gt;&lt;/script&gt;
                </pre>
                <p>
                    The first line adds a script that has been added to your product when you installed the SignalR Nuget package. The second one will expose server code to the client. Each public server SignalR function
                    will have an equivalent client code at <code>$.connection.[your_hub_name]</code>. 
                </p>
                <p>
                    Now you need a Hub. A Hub is a high level SignalR class that allows for
                    seemless client/server communication. Once the Hub is registed, it's possible for the client to call a Hub public method and it's possible for the Hub to call a client method.
                    Your new Hub needs to enherit from the <code>Hub</code> class and implement <a href="https://github.com/andrerpena/chatjs/blob/gh-pages/ChatJsSample/Code/IChatHub.cs">this interface</a>.
                    The <code>IChatHub</code> interface forces you to implement methods in the server that are going to be called from the <a href="https://github.com/andrerpena/chatjs/blob/gh-pages/ChatJsSample/ChatJs/Scripts/jquery.chatjs.signalradapter.js">client adapter</a>.
                    While implementing your own <code>ChatHub</code>, you should consider the <a href="https://github.com/andrerpena/chatjs/blob/gh-pages/ChatJsSample/Code/ChatHub.cs">sample implementation</a>. 
                    Even though it's not meant to be used in production, it gives you a good idea of what to do in each method. All you have to do is to replace the code that deals with the logged user, as well
                    as the code that persists and queries chat messages. You are probably using some database for that.
                </p>
                <h4>The client</h4>
                <p>
                    ChatJS has two JavaScript files: <a href="https://github.com/andrerpena/chatjs/blob/gh-pages/ChatJs/Scripts/jquery.chatjs.signalradapter.js">jquery.chatjs.signalradapter.js</a> and <a href="https://github.com/andrerpena/chatjs/blob/gh-pages/ChatJs/Scripts/jquery.chatjs.js">jquery.chatjs.js</a>.
                    The first one is responsible for the client/server communication. ChatJs itself doesn't know how to communicate to the server, it needs an adapter.
                    If you are using SignalR, you can use the existing adapter without changing anything. If you are implementing your own long polling, for instance, you could
                    create a jquery.chatjs.longpolling.js adapter.
                    As you can see <a href="https://github.com/andrerpena/chatjs/blob/gh-pages/ChatJs/Scripts/jquery.chatjs.signalradapter.js">in the code</a>, the client adapter
                    has two roles: The first one is to expose client functions that are callable from the server. Here is an example:
                </p>
                <pre class="prettyprint">
_this.hub = $.connection.chatHub;
_this.hub.client.sendMessage = function (message) {
    chat.client.sendMessage(message);
};
</pre>
                <p>
                    This is code is implementing a client method called <code>sendMessage</code> that is callable from the server. Every function in the <code>$.connection.chatHub</code> object
                    is called from the server. If we weren't using SignalR, we could implement a long polling in the client that calls particular functions based on a parameter the server returns from 
                    the long polling. That would be similar. Back to SignalR, just so you're clear, here an example of server code calling this function from within <code>ChatHub</code> (C#) :
                </p>
                <pre class="prettyprint">
this.Clients.Client(connectionId).sendMessage(this.GetChatMessage(dbChatMessage, clientGuid));
</pre>
                <p>
                    In this example, <code>this.Clients</code> is the list of client connections. You you're calling a client you must specify which one. If you are sending
                    a message to the user which the Id is 19, for instance, you have to manually track which client connections correspond to the user 19. Yes, there's more than one,
                    because the user Id may have 3 browser tabs opened with the same session, so each user has a list of connections. In the case of <code>ChatHub</code>, the connections
                    are tracked using a <code>Dictionary&lt;string, Dictionary&lt;int, List&lt;string&gt;&gt;&gt;</code>. The outer dictionary is to store rooms and the internal one
                    is to keep track of what connections correspond to what user. They dictionary keys are respectively the room id and the user id.
                </p>
                <p>
                    Now back to the client. The second role of the <a href="https://github.com/andrerpena/chatjs/blob/gh-pages/ChatJs/Scripts/jquery.chatjs.signalradapter.js">adapter</a> is to 
                    expose a means for the plug-in to contact the server. Intead of requesting the server directly, the plug-in will will call the adapter everytime it needs something. All methods in the
                    adapter that have the role of calling the server are under the server object. Example:
                </p>
                <pre class="prettyprint">
_this.server.sendMessage = function (otherUserId, messageText, clientGuid, done) {
    _this.hub.server.sendMessage(otherUserId, messageText, clientGuid).done(function (result) {
        if (done)
            done(result);
    });
};
</pre>
                <p>When ChatJS has to send a message, it will call this function in the adapter. If we weren't using SignalR, we could simply make regular HttpRequests to call the server. That would be the same.</p>
                <p>
                    Now, about the <a href="https://github.com/andrerpena/chatjs/blob/gh-pages/ChatJs/Scripts/jquery.chatjs.js">jquery.chatjs.js</a> itself. There's not much to be done and it hasn't many options.
                    The complete usage is like this:
                </p>
                <pre class="prettyprint">
$.chat({
    // your user information
    user: {
        Id: 3,
        Name: 'John Silver',
        ProfilePictureUrl: 'http://www.foo.com/avatar/123'
    },
    // text displayed when the other user is typing
    typingText: ' is typing...',
    // the title for the user's list window
    titleText: 'ChatJs demo chat',
    // text displayed when there's no other users in the room
    emptyRoomText: "There's no one around here.",
    // the adapter you are using
    adapter: new SignalRAdapter()
});
</pre>
            </div>


        </div>
        <div class="row">
            <div class="span12">
                <h3>Working with long polling</h3>
                <p>If you aren't using ASP.NET or you cannot use SignalR, you should use the long polling solution. [IN PROGRESS]</p>
            </div>
        </div>
        <div class="row">
            <div class="span12">
                <h3>What else?</h3>
                <p>If you have any further questions, take a look at the <a href="https://github.com/andrerpena/chatjs/wiki/FAQ">FAQ</a>, or submit a GitHub issue, tagged as question. I'll do my best to help.</p>
            </div>
        </div>
        <div class="row">
            <div class="span12">
                <h3>About the author</h3>
                <p>
                    Hello everyone, my name is Andr� Pena. I'm a .NET developer from Brazil. I hope you will enjoy ChatJS as much as I enjoy developing it. If you have any problems, you can post a <a href="https://github.com/andrerpena/chatjs/issues">GitHub issue</a>.
                    You can reach me out at <a href="mailto:andrerpena@gmail.com">andrerpena@gmail.com</a> or <a href="http://andrerpena.net/">andrerpena.net</a> (Tumblr).
                </p>
            </div>
        </div>

        <div class="row">
            <div class="span12">
                <h3>License:</h3>
                <p>
                    ChatJS 1.1 is dual licensed. For non-commercial use, ChatJS is free under the <a href="http://www.tldrlegal.com/license/mit-license">MIT license</a>.
                    For commercial license, ChatJS costs <code>$59</code> for unlimited domains, with 1 year of free-updates.
                </p>
            </div>
        </div>
        <div class="row">
            <div class="span12">
                <h3>Third Party:</h3>
                <p>
                    ChatJS uses emoticons freely provided by <a href="http://www.softicons.com/free-icons/designers/aha-soft">Aha</a> at <a href="http://www.softicons.com/">www.softicons.com</a>. Emoticons license: <a href="http://creativecommons.org/licenses/by/3.0/us/">Creative Commons Attribution 3.0</a>
                    . You can easily replace the emiticons by those which better fits your needs. Activity Indicators by <a href="https://github.com/neteye/jquery-plugins/">NETEYE</a>.
                </p>
                <p>
                </p>
            </div>
        </div>
    </div>



    <!-- Modal -->
    <div id="loginModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            <h3 id="myModalLabel">Join demo chat</h3>
        </div>
        <div class="modal-body">
            <p>You are joining the demo chat. There's no need to register, just pass in some information so we can display in the chat window. The e-mail is just so that we can display your picture. It won't be stored.</p>
            <form class="form-horizontal">
                <div class="control-group">
                    <label class="control-label" for="userName">User Display Name</label>
                    <div class="controls">
                        <input type="text" id="userName" placeholder="The way other users will see you." class="input-xlarge">
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="email">E-mail</label>
                    <div class="controls">
                        <input type="text" id="email" placeholder="For Gravatar use only. Will not be stored." class="input-xlarge">
                    </div>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button id="joinChatConclusionButton" class="btn btn-primary" type="button">Join chat</button>
            <button class="btn" data-dismiss="modal" aria-hidden="true">Cancel</button>
        </div>
    </div>

    <footer><a href="https://github.com/andrerpena/chatjs/wiki/FAQ">ChatJS FAQ</a> - <a href="http://andrerpena.net">My Blog</a> - &copy;2013 All rights reserved.</footer>
</body>
</html>
