@model ChatJsSample.Models.ViewModels.ChatViewModel

<!DOCTYPE html>
<html>
<head>
    <title>ChatJs - Facebook style chat for your Web App</title>
    <!--Scripts-->
    <script src="/Scripts/jquery-1.8.1.min.js" type="text/javascript"></script>
    <script src="/Bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
    <script src="/Scripts/jquery.signalR-1.1.0.min.js"></script>
    <script src="/signalr/hubs" type="text/javascript"></script>
    <script src="/ChatJs/Scripts/jquery.chatjs.signalradapter.js" type="text/javascript"></script>
    <script src="/ChatJs/Scripts/jquery.chatjs.js" type="text/javascript"></script>
    <script src="/Scripts/prettify.js" type="text/javascript"></script>
    <script src="/Scripts/scripts.js" type="text/javascript"></script>
    <!--Styles-->
    <link rel="stylesheet" type="text/css" href="/Content/Styles/styles.css" />
    <link rel="stylesheet" type="text/css" href="/ChatJs/Styles/jquery.chatjs.css" />
    <link rel="stylesheet" type="text/css" href="/Bootstrap/css/bootstrap.min.css" />
    <link rel="stylesheet" type="text/css" href="/Bootstrap/css/bootstrap-responsive.min.css" />
    <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
            (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-41028546-1', 'chatjs.net');
        ga('send', 'pageview');

</script>
    @if (this.Model != null && this.Model.IsUserAuthenticated)
    {
        <script type="text/javascript">
            $(function () {
                $.chat({
                    // your user information
                    user: {
                        Id: @this.Model.UserId,
                        Name: '@this.Model.UserName',
                        ProfilePictureUrl: '@Html.Raw(this.Model.UserProfilePictureUrl)'
                    },
                    // the adapter you are using
                    adapter: new SignalRAdapter()
                });
            });
        </script>
    }
</head>
<body>
    <div class="hero">
        <div class="test"></div>
        <div class="container">
            <div class="hero-text">
                <img src="/Content/Images/logo.png" />
                <h1>Embed instant messaging into your Web App!</h1>
                <p>
                    ChatJS is a full-featured, lightweight, Facebook style jQuery plugin for instant messaging. ChatJS also comes with a server side implementation
                        for ASP.NET/SignalR out of the box.
                </p>
                <a class="btn btn-primary btn-large" href="#"><i class="icon-white icon-download-alt" style="margin-right: 10px; margin-top: 4px;"></i>Download</a>
                @if (this.Model != null && this.Model.IsUserAuthenticated)
                {
                    <a id="leaveChatButton" href="#" class="btn btn-warning btn-large">Leave demo chat</a>                    
                }
                else
                {
                    <a id="joinChatButton" href="#" class="btn btn-info btn-large">Join demo chat</a>
                    <img class="callout" src="/Content/Images/callout.png" />
                }                
            </div>
            <div class="screenshot-wrapper">
                <img src="/Content/Images/screenshot.png" />
            </div>
        </div>
    </div>
    <div class="container">
        <div class="row">

            <div class="span6">
                <h4>How it works:
                </h4>
                <p>
                    The client part is divided in two JavaScript files.
                        The file <span class="text-info">jquery.chatjs.js</span> contains the main jQuery plugin <code>$.chat()</code> and <span class="text-info">jquery.chatjs.signalradapter.js</span> contains
                        the adapter function needed to tell the plug-in how to interact with the server.
                </p>
                <div class="bs-docs-example">
                    <p>Once the server is set up, the client code is quite simple. Basic usage:</p>
                </div>
                <pre class="prettyprint">
$.chat({
    // your user information
    user: {
        Id: 3,
        Name: 'John Silver',
        ProfilePictureUrl: 'http://www.foo.com/avatar/123'
    },
    // the adapter you are using
    adapter: new SignalRAdapter()
});
</pre>
            </div>
            <div class="span6">
                <h4>Features:</h4>
                <ul class="green-checks">
                    <li>Real time message sharing (Oh really?).</li>
                    <li>Displays a list of users and, as the user select another user to chat, a separate JavaScript window is opened, which can be closed and minimized. Yes, like Facebook =)</li>
                    <li>Automatically remembers opened windows and their minimized state across diferent requests (though cookies).</li>
                    <li>Triggers a sound notification when the user receives a message.</li>
                    <li>Indicates when another using is typing.</li>
                    <li>Supports multiple chat rooms. If you have a multi-tenancy app you can create a room for each tenancy, for instance.</li>
                    <li>Supports multiple browser windows opened with the same session. They all get properly sinchronized.</li>
                    <li>Customizable texts. You can easily translate it to your language.</li>
                    <li>Both client and server code ready to be used for <a href="http://signalr.net/">ASP.NET with SignalR</a>. Development version available with fully commented source code. The pieces of server code that need to be implemented to add message database persistence and to
                            retrieve user information are already implemented in commented code to make your life easier. Just follow the manual and get it running fast.</li>
                </ul>
            </div>
        </div>
        <div class="row">
            <div class="span12">
                <h3>License:</h3>
                <p>ChatJS is open-source and licensed under a non-comercial BSD license.</p>
                <p>
                    Now in plain English: If you do not directly or indirectly charge your users at any plan, ChatJS is free to use, even if your application is not open-source. You can even redistribute ChatJS source code as long as you do not charge your custumers 
                    or remove the licensing headers from the JavaScript and CSS files. If you need a commercial license, it's <code>$49</code>
                . This fee gives you the right to use the code forever, royalty-free with 1 year of free updates. The commercial
                    license allows you to do whatever you want with the code, like deploying to unlimited domains or redistributing it to your customers. The only restriction for the commercial license is that you cannot resell ChatJS as an individual product.
            </div>

        </div>
        <div class="row">
            <div class="span12">
                <h3>How to get ChatJS up and running in your environment</h3>
                <p>
                    As I said, ChatJS only works out of the box with <a href="http://signalr.net/">ASP.NET with SignalR</a>, so, this manual will be focused in this scenario.
                        Everything that I'll explain here is implemented already in the demo application available in the <a href="#">ChatJS package</a>. It's highly recommended that
                        will download that before continuing with this manual. First thing to do is to download SignalR if you haven't already. To do so, in Visual Studio, select the Tools menu, and then Library Package Manager and then select Package Manager console. Now type in the following line: 
                </p>
                <pre>Install-Package Microsoft.AspNet.SignalR</pre>
                <p>
                    This will install all the packages needed to run SignalR. Now let's set up the code. First, go to your <code>HttpApplication</code> class, inside the <code>Application_Start</code> method and put this line: <code>RouteTable.Routes.MapHubs();</code>.
                    This will map the routes needed to make the server accessible to the client. Next, you need to add the necessary scripts in your Views, preferably the layout. Add the following lines:
                    
                </p>
                <pre>
&lt;script src="/Scripts/jquery.signalR-1.1.0.min.js"&gt;&lt;/script&gt;
&lt;script src="/signalr/hubs" type="text/javascript"&gt;&lt;/script&gt;
                </pre>
                <p>
                    The first line adds a script that has been added to your product when you installed the SignalR Nuget package. The second one will expose server code to the client. Each public server SignalR function
                    will have an equivalent client code at <code>$.connection.[your_hub_name]</code>. 
                </p>
                <p>
                    Now you need a Hub. A Hub is a high level SignalR class that allows for
                        seemless client/server communication. Once the Hub is registed, it's possible for the client to call a Hub public method and it's possible for the Hub to call a client method.
                        Your new Hub needs to enherit from the <code>Hub</code> class and implement this interface (C#). This interface represents the methods that the client can call in the server:
                </p>
                <pre>
<code>public interface IChatHub
{
    /// &lt;summary&gt;
    /// Returns the message history between the current user and another user
    /// &lt;/summary&gt;
    List&lt;ChatMessage&gt; GetMessageHistory(int otherUserId);

    /// &lt;summary&gt;
    /// Sends a message to a another user
    /// &lt;/summary&gt;
    void SendMessage(int otherUserId, string message, string clientGuid);

    /// &lt;summary&gt;
    /// Sends a typing signal to a another user
    /// &lt;summary&gt;
    void SendTypingSignal(int otherUserId);

    /// &lt;summary&gt;
    /// When a new client connects
    /// &lt;summary&gt;
    System.Threading.Tasks.Task OnConnected();

    /// &lt;summary&gt;
    /// When a client disconnectes
    /// &lt;summary&gt;
    System.Threading.Tasks.Task OnDisconnected();
}
</code>
</pre>
                <p>
                    Your interface does not need to be exacly this. It's not a strongly typed reference. All that matters is that the names of the methods that the client will
                        call must match the server method names. In this case, the JavaScript file <span class="text-info">jquery.chatjs.signalradapter.js</span> already expects your Hub to contain these methods
                        so it's easier just to name your methods like this. This interface is just to make things easier and to prevent errors.
                </p>
            </div>


        </div>
    </div>

    <!-- Modal -->
    <div id="loginModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            <h3 id="myModalLabel">Join demo chat</h3>
        </div>
        <div class="modal-body">
            <p>You are joining the demo chat. There's no need to register, just pass in some information so we can display in the chat window. The e-mail is just so that we can display your picture. It won't be stored.</p>
            <form class="form-horizontal">
                <div class="control-group">
                    <label class="control-label" for="userName">User Display Name</label>
                    <div class="controls">
                        <input type="text" id="userName" placeholder="The way other users will see you." class="input-xlarge">
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="email">E-mail</label>
                    <div class="controls">
                        <input type="text" id="email" placeholder="For Gravatar use only. Will not be stored." class="input-xlarge">
                    </div>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button id="joinChatConclusionButton" class="btn btn-primary" type="button">Join chat</button>
            <button class="btn" data-dismiss="modal" aria-hidden="true">Cancel</button>
        </div>
    </div>
</body>
</html>
